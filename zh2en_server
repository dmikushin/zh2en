#!/usr/bin/env python
# Suppress "UserWarning: floor_divide is deprecated"
import warnings
warnings.filterwarnings("ignore")

from http.server import BaseHTTPRequestHandler, HTTPServer
from transformers import AutoTokenizer, AutoModelForSeq2SeqLM

tokenizer = AutoTokenizer.from_pretrained("./ThirdParty/opus-mt-zh-en")

model = AutoModelForSeq2SeqLM.from_pretrained("./ThirdParty/opus-mt-zh-en")

hostName = "localhost"
serverPort = 8080

class Server(BaseHTTPRequestHandler):
    def do_POST(self):
        content_length = int(self.headers['Content-Length'])
        text = self.rfile.read(content_length).decode("utf-8")
        print("POST: " + text)

        translated = model.generate(**tokenizer(text, return_tensors="pt", padding=True))
        translation = ''
        for t in translated :
            translation = translation + tokenizer.decode(t, skip_special_tokens=True)

        self.send_response(200)
        origin = self.headers['ORIGIN'];
        self.send_header("Content-type", "text/plain")
        self.send_header("Access-Control-Allow-Origin", origin);
        self.end_headers()

        self.wfile.write(bytes(translation, "utf-8"))

    def do_OPTIONS(self):
        self.send_response(200)

        # In case of an OPTIONS, we allow the access to the origin of the petition
        origin = self.headers['ORIGIN'];
        self.send_header("Access-Control-Allow-Origin", origin);
        self.send_header("Access-Control-Allow-Methods", "POST");
        self.send_header("Access-Control-Allow-Headers", "accept, content-type");
        self.send_header("Access-Control-Max-Age", "1728000");
        self.end_headers()

        content_length = int(self.headers['Content-Length'])
        text = self.rfile.read(content_length).decode("utf-8")
        print("OPTIONS: " + text)


if __name__ == "__main__":        
    webServer = HTTPServer((hostName, serverPort), Server)
    print("======== Running on http://%s:%s ========" % (hostName, serverPort))
    print("(Press CTRL+C to quit)")

    try:
        webServer.serve_forever()
    except KeyboardInterrupt:
        pass

    webServer.server_close()
    print("======== Server stopped ======== ")

